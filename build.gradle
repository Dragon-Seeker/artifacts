plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.1-SNAPSHOT" apply false
}

architectury {
    minecraft = rootProject.minecraft_version
}

subprojects {
    if (project.name != 'data') {
        apply plugin: "dev.architectury.loom"

        loom {
            silentMojangMappingsLicense()
        }

        dependencies {
            minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
            mappings loom.officialMojangMappings()
        }
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    sourceSets {
        main.resources.srcDirs = ['src/main/resources', 'src/generated/resources']
    }

    archivesBaseName = rootProject.archives_base_name
    version = rootProject.mod_version
    group = rootProject.maven_group

    repositories {
        maven {
            name "curios"
            url "https://maven.theillusivec4.top/"
        }
        maven {
            name "expandability"
            url "https://maven.florens.be/releases"
        }
        maven {
            url "https://maven.shedaniel.me/"
        }
        maven {
            url "https://api.modrinth.com/maven"
        }
        maven {
            name "TerraformersMC"
            url "https://maven.terraformersmc.com/"
        }
        maven {
            name "Ladysnake Libs"
            url 'https://maven.ladysnake.org/releases'
        }
        maven {
            name "Porting Lib"
            url "https://mvn.devos.one/snapshots/"
        }
        maven {
            url = "https://maven.vram.io"
        }
        maven {
            name "Will BL Releases"
            url "https://maven.willbl.dev/releases"
        }
        maven {
            url "https://cursemaven.com"
        }
        maven {
            name "mixin-extras"
            url = "https://jitpack.io"
            content {
                includeGroupByRegex "com.github.*"
            }
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.release = 17
    }

    java {
        withSourcesJar()
    }
}
task collectJars(type: Copy) {
    subprojects {
        if (project.name != "common" && project.name != "data") {
            def remapJar = project.tasks.named('remapJar')
            dependsOn remapJar
            from remapJar
        }
    }

    into(buildDir.toPath().resolve("libs"))
}

assemble {
    dependsOn(collectJars)
}
