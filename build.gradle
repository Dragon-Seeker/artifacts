plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.7-SNAPSHOT" apply false
}

architectury {
    minecraft = rootProject.minecraft_version
}

subprojects {
    if (project.name != 'data') {
        apply plugin: "dev.architectury.loom"

        loom {
            silentMojangMappingsLicense()
        }

        dependencies {
            minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
            mappings loom.officialMojangMappings()
        }
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    sourceSets {
        main.resources.srcDirs = ['src/main/resources', 'src/generated/resources']
    }

    archivesBaseName = rootProject.archives_base_name
    version = rootProject.mod_version
    group = rootProject.maven_group

    repositories {
        mavenCentral()
        maven {
            url "https://jitpack.io"
            content {
                includeGroupByRegex "com.github.*"
            }
        }
        maven {
            url "https://cursemaven.com"
            content {
                includeGroup "curse.maven"
            }
        }
        maven {
            url "https://api.modrinth.com/maven"
            content {
                includeGroup "maven.modrinth"
            }
        }
        maven {
            url "https://maven.octo-studios.com/releases"
            content {
                includeGroupByRegex "top.theillusivec4.*"
            }
        }
        maven {
            url "https://maven.florens.be/releases"
            content {
                includeGroup "be.florens"
            }
        }
        maven {
            url "https://maven.shedaniel.me/"
            content {
                includeGroupByRegex "me.shedaniel.*"
            }
        }
        maven {
            url "https://maven.terraformersmc.com/"
            content {
                includeGroup "dev.emi"
                includeGroup "com.terraformersmc"
            }
        }
        maven {
            name "Ladysnake Mods"
            url "https://maven.ladysnake.org/releases"
            content {
                includeGroupByRegex "dev.onyxstudios.*"
                includeGroupByRegex "org.ladysnake.*"
                includeGroupByRegex "io.github.*"
            }
        }
        maven {
            name = 'Ladysnake Mods (snapshots)'
            url = 'https://maven.ladysnake.org/snapshots'
            content {
                includeGroupByRegex "io.github.*"
            }
        }
        maven {
            name = "QuiltMC"
            url = "https://maven.quiltmc.org/repository/release"
            content {
                includeGroupByRegex "org.quiltmc.*"
            }
        }
        maven {
            name "NeoForge"
            url "https://maven.neoforged.net/releases/"
            content {
                includeGroupByRegex "net.neoforged.*"
                includeGroup "cpw.mods"
            }
        }
        maven { url 'https://maven.wispforest.io/releases' }
        maven { url 'https://maven.su5ed.dev/releases' }
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.release = 21
    }

    java {
        withSourcesJar()
    }
}
task collectJars(type: Copy) {
    subprojects {
        if (project.name != "common" && project.name != "data") {
            def remapJar = project.tasks.named('remapJar')
            dependsOn remapJar
            from remapJar
        }
    }

    into(buildDir.toPath().resolve("libs"))
}

assemble {
    dependsOn(collectJars)
}
